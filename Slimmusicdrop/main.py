import logging
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ContextTypes

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TELEGRAM_TOKEN = "YOUR_TOKEN_HERE"
ADMIN_ID = 5759462723  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID
USAGE_FILE = "usage.json"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –†–æ–±–æ—Ç–∞ –∑ –ª—ñ–º—ñ—Ç–æ–º ---
def load_usage():
    if not os.path.exists(USAGE_FILE):
        return {"plays": 0}
    with open(USAGE_FILE, "r") as f:
        return json.load(f)

def save_usage(usage):
    with open(USAGE_FILE, "w") as f:
        json.dump(usage, f)

def increase_usage():
    usage = load_usage()
    usage["plays"] += 1
    save_usage(usage)
    return usage["plays"]

def get_remaining():
    usage = load_usage()
    return max(0, 5 - usage["plays"])

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    remaining = get_remaining()
    if remaining > 0:
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—é! –£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å {remaining} –∑ 5 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å.\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç—Ä–µ–∫—É, —â–æ–± –∑–Ω–∞–π—Ç–∏ –π–æ–≥–æ."
        )
    else:
        keyboard = [[InlineKeyboardButton("–ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É üí≥", url="https://example.com/payment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üö´ –õ—ñ–º—ñ—Ç —É 5 –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ö—É–ø—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± —Å–ª—É—Ö–∞—Ç–∏ –¥–∞–ª—ñ.",
            reply_markup=reply_markup
        )

async def search_youtube_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    usage = load_usage()
    if usage["plays"] >= 5:
        keyboard = [[InlineKeyboardButton("–ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É üí≥", url="https://example.com/payment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üö´ –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ 5 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å. –ö—É–ø—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø—É.",
            reply_markup=reply_markup
        )
        return

    # —Ç—É—Ç –≤—Å—Ç–∞–≤–ª—è—î—à –ª–æ–≥—ñ–∫—É –ø–æ—à—É–∫—É/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–∑–∏–∫–∏
    # –ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç:
    query = update.message.text
    await update.message.reply_text(f"üéµ –ó–Ω–∞—Ö–æ–¥–∂—É —Ç—Ä–µ–∫: {query} ...")

    # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    increase_usage()
    remaining = get_remaining()
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ. –ó–∞–ª–∏—à–∏–ª–æ—Å—å {remaining} –∑ 5 –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    usage = {"plays": 0}
    save_usage(usage)
    remaining = get_remaining()
    await update.message.reply_text(
        f"‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å–∫–∏–Ω—É—Ç–æ. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä {remaining} –∑ 5 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å."
    )

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_youtube_music))

    app.run_polling()

if __name__ == "__main__":
    main()